-- MySQL Script generated by MySQL Workbench
-- Wed Apr 22 16:37:17 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema RestaurantsV2
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema RestaurantsV2
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `RestaurantsV2` DEFAULT CHARACTER SET utf8 ;
USE `RestaurantsV2` ;

-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Monthly Schedules`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Monthly Schedules` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Shifts` TEXT NOT NULL COMMENT 'The employee shifts.\n',
  `Payment Method` VARCHAR(45) NOT NULL,
  `Wage` FLOAT NOT NULL COMMENT 'The wage of the employees.',
  `Restauran ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the restaurant that made the monthly schedule.\n',
  PRIMARY KEY (`ID`, `Restauran ID`),
  INDEX `fk_Monthly Schedule_Restaurants1_idx` (`Restauran ID` ASC) VISIBLE,
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE,
  CONSTRAINT `fk_Monthly Schedule_Restaurants1`
    FOREIGN KEY (`Restauran ID`)
    REFERENCES `RestaurantsV2`.`Restaurants` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Employees`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Employees` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'The ID of the employee.',
  `Name` VARCHAR(45) NOT NULL COMMENT 'The name of the employee.',
  `Role` ENUM('Manager', 'Chef', 'Chef Assistant', 'Social Relations', 'Waiter', 'Cashier', 'Transporter', 'Accoutant') NOT NULL COMMENT 'The role of the employee in the restaurant.',
  `Wage` FLOAT UNSIGNED NOT NULL COMMENT 'The wage of the employee.',
  `Start Date` DATE NOT NULL COMMENT 'The date that the employee stared working at the restaurant.',
  `Address` VARCHAR(45) NOT NULL COMMENT 'The home address of the employee.',
  `City` VARCHAR(45) NOT NULL COMMENT 'The city that the employee lives in.',
  `Postal Code` VARCHAR(45) NOT NULL COMMENT 'The postal code of the region that the employee lives in.',
  `Phone` VARCHAR(45) NOT NULL COMMENT 'The phone number of the employee.',
  `Email` VARCHAR(45) NOT NULL COMMENT 'The email address of the employee.',
  `Restaurant ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the restaurant that the employee works at.',
  `Monthly Schedule ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the monthly schedule that was given to the employee.',
  `Supervisor ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the supervisor of this employee.',
  PRIMARY KEY (`ID`, `Supervisor ID`, `Restaurant ID`, `Monthly Schedule ID`),
  INDEX `fk_Employees_Restaurants1_idx` (`Restaurant ID` ASC) VISIBLE,
  INDEX `fk_Employees_Monthly Schedule1_idx` (`Monthly Schedule ID` ASC) VISIBLE,
  INDEX `fk_Employees_Employees1_idx` (`Supervisor ID` ASC) VISIBLE,
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE,
  CONSTRAINT `fk_Employees_Restaurants1`
    FOREIGN KEY (`Restaurant ID`)
    REFERENCES `RestaurantsV2`.`Restaurants` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Employees_Monthly Schedule1`
    FOREIGN KEY (`Monthly Schedule ID`)
    REFERENCES `RestaurantsV2`.`Monthly Schedules` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Employees_Employees1`
    FOREIGN KEY (`Supervisor ID`)
    REFERENCES `RestaurantsV2`.`Employees` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Represents an eployee of a restaurant.';


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Restaurants`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Restaurants` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'The ID of the restaurant.',
  `Address` VARCHAR(45) NOT NULL COMMENT 'The address of the restaurant.',
  `City` VARCHAR(45) NOT NULL COMMENT 'The city where the restaurant is located.',
  `Postal Code` VARCHAR(45) NOT NULL COMMENT 'The postal code of the region where the restaurant is located.',
  `Phone` VARCHAR(45) NOT NULL COMMENT 'The phone number of the restaurat.',
  `Hours` TEXT NOT NULL COMMENT 'The hours that the restaurant is open.',
  `Manager ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the manager of the restaurant.',
  PRIMARY KEY (`ID`),
  INDEX `fk_Restaurants_Employees1_idx` (`Manager ID` ASC) VISIBLE,
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE,
  CONSTRAINT `fk_Restaurants_Employees1`
    FOREIGN KEY (`Manager ID`)
    REFERENCES `RestaurantsV2`.`Employees` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Represents a restaurant.';


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Suppliers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Suppliers` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'The ID of the supplier.',
  `Brand Name` VARCHAR(45) NOT NULL COMMENT 'The brand name of the supplier.',
  `Address` VARCHAR(45) NOT NULL COMMENT 'The address of the supplier.',
  `City` VARCHAR(45) NOT NULL COMMENT 'The city where the supplier is located.',
  `Phone` VARCHAR(45) NOT NULL COMMENT 'The phone number of the supplier.',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE)
ENGINE = InnoDB
COMMENT = 'Represents a supplier of a restaurant.';


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Supplied - Supplies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Supplied - Supplies` (
  `Restaurant ID` INT UNSIGNED NOT NULL COMMENT 'The restaurant ID that the supplier supplies.',
  `Supplier ID` INT UNSIGNED NOT NULL COMMENT 'The supplier ID that supplies the restaurant.\n',
  PRIMARY KEY (`Restaurant ID`, `Supplier ID`),
  INDEX `fk_Restaurants_has_Suppliers_Suppliers1_idx` (`Supplier ID` ASC) VISIBLE,
  INDEX `fk_Restaurants_has_Suppliers_Restaurants1_idx` (`Restaurant ID` ASC) VISIBLE,
  CONSTRAINT `fk_Restaurants_has_Suppliers_Restaurants1`
    FOREIGN KEY (`Restaurant ID`)
    REFERENCES `RestaurantsV2`.`Restaurants` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Restaurants_has_Suppliers_Suppliers1`
    FOREIGN KEY (`Supplier ID`)
    REFERENCES `RestaurantsV2`.`Suppliers` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Supplier Payments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Supplier Payments` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'The ID of the supplier payment.',
  `Date` DATE NOT NULL COMMENT 'The date of the supplier payment.',
  `Method` VARCHAR(45) NOT NULL COMMENT 'The method of payment to the supplier.',
  `Amount` FLOAT UNSIGNED NOT NULL COMMENT 'The payment amount to the supplier.',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Supplier Orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Supplier Orders` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'The ID of the supplier order.',
  `Order Date` DATE NOT NULL COMMENT 'The date of the supplier order.',
  `Delivery Date` DATE NOT NULL COMMENT 'The deliver date of the supplier order.',
  `Contact` VARCHAR(45) NOT NULL COMMENT 'The employee that the restaurant contacted for the supplier order.',
  `Restaurant ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the restaurant that made the order.\n',
  `Supplier ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the supplier that the order if for.',
  `Payment` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`ID`, `Restaurant ID`, `Supplier ID`, `Payment`),
  INDEX `fk_Supplier Orders_Restaurants1_idx` (`Restaurant ID` ASC) VISIBLE,
  INDEX `fk_Supplier Orders_Suppliers1_idx` (`Supplier ID` ASC) VISIBLE,
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE,
  INDEX `fk_Supplier Orders_Supplier Payments1_idx` (`Payment` ASC) VISIBLE,
  CONSTRAINT `fk_Supplier Orders_Restaurants1`
    FOREIGN KEY (`Restaurant ID`)
    REFERENCES `RestaurantsV2`.`Restaurants` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Supplier Orders_Suppliers1`
    FOREIGN KEY (`Supplier ID`)
    REFERENCES `RestaurantsV2`.`Suppliers` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Supplier Orders_Supplier Payments1`
    FOREIGN KEY (`Payment`)
    REFERENCES `RestaurantsV2`.`Supplier Payments` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Menu Items`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Menu Items` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL COMMENT 'The name of the menu item.',
  `Price` FLOAT UNSIGNED NOT NULL COMMENT 'The price of the menu item.',
  `Calories` FLOAT UNSIGNED NOT NULL COMMENT 'The calories of the menu item.',
  `Weight` FLOAT UNSIGNED NOT NULL COMMENT 'The weight of the menu item.',
  `Allergies` TEXT NULL COMMENT 'Possible allergies of that menu item can cause.',
  `Restaurant ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the restaurant that has the menu item.',
  PRIMARY KEY (`ID`, `Restaurant ID`),
  INDEX `fk_Menu Items_Restaurants1_idx` (`Restaurant ID` ASC) VISIBLE,
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE,
  CONSTRAINT `fk_Menu Items_Restaurants1`
    FOREIGN KEY (`Restaurant ID`)
    REFERENCES `RestaurantsV2`.`Restaurants` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Represents a menu item of a restaurant.';


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Raw Materials`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Raw Materials` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'The ID of the raw material.',
  `Name` VARCHAR(45) NOT NULL COMMENT 'The name of the raw material.',
  `Description` TEXT NULL COMMENT 'A description of the raw material.',
  `Weight` FLOAT UNSIGNED NOT NULL COMMENT 'The weight of the raw material.',
  `Delivery Date` DATE NOT NULL COMMENT 'The delivery date of the raw material.W',
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE)
ENGINE = InnoDB
COMMENT = 'Represents a raw mateiral that a menu item uses and a supplier supplies.';


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Contains - Is Contained`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Contains - Is Contained` (
  `Supplier Order ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the order that contains the raw materials.',
  `Restaurant ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the restaurant that has made the order.',
  `Supplier ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the supplier that the order is for.',
  `Raw Material ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the raw material in the order.',
  `Amount` INT UNSIGNED NOT NULL COMMENT 'The amout of raw material in the order.',
  PRIMARY KEY (`Supplier Order ID`, `Restaurant ID`, `Supplier ID`, `Raw Material ID`),
  INDEX `fk_Supplier Orders_has_Raw Materials_Raw Materials1_idx` (`Raw Material ID` ASC) VISIBLE,
  INDEX `fk_Supplier Orders_has_Raw Materials_Supplier Orders1_idx` (`Supplier Order ID` ASC, `Restaurant ID` ASC, `Supplier ID` ASC) VISIBLE,
  CONSTRAINT `fk_Supplier Orders_has_Raw Materials_Supplier Orders1`
    FOREIGN KEY (`Supplier Order ID` , `Restaurant ID` , `Supplier ID`)
    REFERENCES `RestaurantsV2`.`Supplier Orders` (`ID` , `Restaurant ID` , `Supplier ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Supplier Orders_has_Raw Materials_Raw Materials1`
    FOREIGN KEY (`Raw Material ID`)
    REFERENCES `RestaurantsV2`.`Raw Materials` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Supplies - Is Supplied`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Supplies - Is Supplied` (
  `Raw Material ID` INT UNSIGNED NOT NULL COMMENT 'The raw material ID that is supplied by the supplier.',
  `Supplier ID` INT UNSIGNED NOT NULL COMMENT 'The supplier ID that supplies the raw material.',
  PRIMARY KEY (`Raw Material ID`, `Supplier ID`),
  INDEX `fk_Raw Materials_has_Suppliers_Suppliers1_idx` (`Supplier ID` ASC) VISIBLE,
  INDEX `fk_Raw Materials_has_Suppliers_Raw Materials1_idx` (`Raw Material ID` ASC) VISIBLE,
  CONSTRAINT `fk_Raw Materials_has_Suppliers_Raw Materials1`
    FOREIGN KEY (`Raw Material ID`)
    REFERENCES `RestaurantsV2`.`Raw Materials` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Raw Materials_has_Suppliers_Suppliers1`
    FOREIGN KEY (`Supplier ID`)
    REFERENCES `RestaurantsV2`.`Suppliers` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Customer Review`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Customer Review` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'The ID of the customer review.',
  `Date` DATE NOT NULL COMMENT 'The date that the customer review was submitted.',
  `Comments` TEXT NULL COMMENT 'The comments of the customer review.',
  `Rating` FLOAT NOT NULL COMMENT 'The rating of the customer review.\n',
  `PosNeg` ENUM('Positive', 'Negative') NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Customers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Customers` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `First Name` VARCHAR(45) NULL,
  `Last Name` VARCHAR(45) NULL,
  `Seats` INT UNSIGNED NULL,
  `Suggested By` VARCHAR(45) NULL COMMENT 'The name of whom suggested to the customer to visit one of the restaurants.',
  `Employee ID` INT UNSIGNED NULL COMMENT 'The ID of the employee that assisted the customer.',
  `Constraints` INT UNSIGNED NULL,
  `Customer Review_ID` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_Customer_Employees1_idx` (`Employee ID` ASC) VISIBLE,
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE,
  INDEX `fk_Customers_Raw Materials1_idx` (`Constraints` ASC) VISIBLE,
  INDEX `fk_Customers_Customer Review1_idx` (`Customer Review_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Customer_Employees1`
    FOREIGN KEY (`Employee ID`)
    REFERENCES `RestaurantsV2`.`Employees` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Customers_Raw Materials1`
    FOREIGN KEY (`Constraints`)
    REFERENCES `RestaurantsV2`.`Raw Materials` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Customers_Customer Review1`
    FOREIGN KEY (`Customer Review_ID`)
    REFERENCES `RestaurantsV2`.`Customer Review` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Represents a customer of a restaurant.';


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Customer Orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Customer Orders` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'The ID of the customer order.',
  `Date` DATE NOT NULL COMMENT 'The date that the order was submitted.',
  `Customer ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the customer that submitted the order.',
  `Restaurant ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the restaurant that the order was submitted to.',
  PRIMARY KEY (`ID`, `Customer ID`, `Restaurant ID`),
  INDEX `fk_Customer Orders_Customers1_idx` (`Customer ID` ASC) VISIBLE,
  INDEX `fk_Customer Orders_Restaurants1_idx` (`Restaurant ID` ASC) VISIBLE,
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE,
  CONSTRAINT `fk_Customer Orders_Customers1`
    FOREIGN KEY (`Customer ID`)
    REFERENCES `RestaurantsV2`.`Customers` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Customer Orders_Restaurants1`
    FOREIGN KEY (`Restaurant ID`)
    REFERENCES `RestaurantsV2`.`Restaurants` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Contains - Is Contained`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Contains - Is Contained` (
  `Supplier Order ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the order that contains the raw materials.',
  `Restaurant ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the restaurant that has made the order.',
  `Supplier ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the supplier that the order is for.',
  `Raw Material ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the raw material in the order.',
  `Amount` INT UNSIGNED NOT NULL COMMENT 'The amout of raw material in the order.',
  PRIMARY KEY (`Supplier Order ID`, `Restaurant ID`, `Supplier ID`, `Raw Material ID`),
  INDEX `fk_Supplier Orders_has_Raw Materials_Raw Materials1_idx` (`Raw Material ID` ASC) VISIBLE,
  INDEX `fk_Supplier Orders_has_Raw Materials_Supplier Orders1_idx` (`Supplier Order ID` ASC, `Restaurant ID` ASC, `Supplier ID` ASC) VISIBLE,
  CONSTRAINT `fk_Supplier Orders_has_Raw Materials_Supplier Orders1`
    FOREIGN KEY (`Supplier Order ID` , `Restaurant ID` , `Supplier ID`)
    REFERENCES `RestaurantsV2`.`Supplier Orders` (`ID` , `Restaurant ID` , `Supplier ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Supplier Orders_has_Raw Materials_Raw Materials1`
    FOREIGN KEY (`Raw Material ID`)
    REFERENCES `RestaurantsV2`.`Raw Materials` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Order Payments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Order Payments` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'The ID of the order payment.',
  `Method` VARCHAR(45) NOT NULL COMMENT 'The payment method.',
  `Total` FLOAT UNSIGNED NOT NULL COMMENT 'The total amount of money spent.',
  `Customer ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the customer that ',
  PRIMARY KEY (`ID`, `Customer ID`),
  INDEX `fk_Order Payments_Customers1_idx` (`Customer ID` ASC) VISIBLE,
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE,
  CONSTRAINT `fk_Order Payments_Customers1`
    FOREIGN KEY (`Customer ID`)
    REFERENCES `RestaurantsV2`.`Customers` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Sanitary Check`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Sanitary Check` (
  `ID` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT 'The ID of the sanitary check.\n',
  `Date` DATE NOT NULL COMMENT 'The date that the sanitary check happened.',
  `Name` VARCHAR(45) NOT NULL COMMENT 'The name of the person conducting the check.\n',
  `Rating` FLOAT UNSIGNED NOT NULL COMMENT 'The rating that the reviewer gave to the restaurant.',
  `Details` TEXT NULL COMMENT 'The details of the review.\n',
  `Restaurants_ID` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`ID`, `Restaurants_ID`),
  INDEX `fk_Sanitary Check_Restaurants1_idx` (`Restaurants_ID` ASC) VISIBLE,
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC) VISIBLE,
  CONSTRAINT `fk_Sanitary Check_Restaurants1`
    FOREIGN KEY (`Restaurants_ID`)
    REFERENCES `RestaurantsV2`.`Restaurants` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Contains - Is Contained`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Contains - Is Contained` (
  `Supplier Order ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the order that contains the raw materials.',
  `Restaurant ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the restaurant that has made the order.',
  `Supplier ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the supplier that the order is for.',
  `Raw Material ID` INT UNSIGNED NOT NULL COMMENT 'The ID of the raw material in the order.',
  `Amount` INT UNSIGNED NOT NULL COMMENT 'The amout of raw material in the order.',
  PRIMARY KEY (`Supplier Order ID`, `Restaurant ID`, `Supplier ID`, `Raw Material ID`),
  INDEX `fk_Supplier Orders_has_Raw Materials_Raw Materials1_idx` (`Raw Material ID` ASC) VISIBLE,
  INDEX `fk_Supplier Orders_has_Raw Materials_Supplier Orders1_idx` (`Supplier Order ID` ASC, `Restaurant ID` ASC, `Supplier ID` ASC) VISIBLE,
  CONSTRAINT `fk_Supplier Orders_has_Raw Materials_Supplier Orders1`
    FOREIGN KEY (`Supplier Order ID` , `Restaurant ID` , `Supplier ID`)
    REFERENCES `RestaurantsV2`.`Supplier Orders` (`ID` , `Restaurant ID` , `Supplier ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Supplier Orders_has_Raw Materials_Raw Materials1`
    FOREIGN KEY (`Raw Material ID`)
    REFERENCES `RestaurantsV2`.`Raw Materials` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Customers_has_Restaurants`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Customers_has_Restaurants` (
  `Customers` INT UNSIGNED NOT NULL,
  `Restaurants` INT UNSIGNED NOT NULL,
  `Amount of Customers` INT NULL,
  PRIMARY KEY (`Customers`, `Restaurants`),
  INDEX `fk_Customers_has_Restaurants_Restaurants1_idx` (`Restaurants` ASC) VISIBLE,
  INDEX `fk_Customers_has_Restaurants_Customers1_idx` (`Customers` ASC) VISIBLE,
  CONSTRAINT `fk_Customers_has_Restaurants_Customers1`
    FOREIGN KEY (`Customers`)
    REFERENCES `RestaurantsV2`.`Customers` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Customers_has_Restaurants_Restaurants1`
    FOREIGN KEY (`Restaurants`)
    REFERENCES `RestaurantsV2`.`Restaurants` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `RestaurantsV2`.`Restaurant - Review`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `RestaurantsV2`.`Restaurant - Review` (
  `Restaurants_ID` INT UNSIGNED NOT NULL,
  `Customer Review_ID` INT UNSIGNED NOT NULL,
  `Amount of Reviews` INT NULL,
  PRIMARY KEY (`Restaurants_ID`, `Customer Review_ID`),
  INDEX `fk_Restaurant - Review_Customer Review1_idx` (`Customer Review_ID` ASC) VISIBLE,
  CONSTRAINT `fk_Restaurant - Review_Restaurants1`
    FOREIGN KEY (`Restaurants_ID`)
    REFERENCES `RestaurantsV2`.`Restaurants` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Restaurant - Review_Customer Review1`
    FOREIGN KEY (`Customer Review_ID`)
    REFERENCES `RestaurantsV2`.`Customer Review` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
